// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, the ALU executes the inputted instruction according
 * to the Hack machine language specification, as follows. 
 * The D and A in the language specification refer to CPU-resident registers,
 * while M refers to the memory register addressed by A, i.e. to Memory[A].
 * The inM input holds the value of this register. If the current instruction 
 * needs to write a value to M, the value is placed in outM, the address 
 * of the target register is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset == 1, then the 
 * CPU jumps to address 0 (i.e. sets pc = 0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current program
                         // (reset == 1) or continue executing the current
                         // program (reset == 0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // RAM address (of M)
        pc[15];          // ROM address (of next instruction)

    PARTS:
    Not(in=instruction[15],out=Ainstruction);  // if instruction[15] is zero then Ainstruction
    Not(in=Ainstruction,out=Cinstruction);     // else its a Cinstruction
    
    And(a=Cinstruction,b=instruction[5],out=ALUtoA);      // if (Cinstruction and instruction[5]) then ALUtoA
    Mux16(a=instruction,b=ALUout,sel=ALUtoA,out=Aregin);  // else instruction to A
    
    Or(a=Ainstruction,b=ALUtoA,out=loadA);          // load A if (Ainstruction or ALUtoA) 
    ARegister(in=Aregin,load=loadA,out=Aout);
    
    Mux16(a=Aout,b=inM,sel=instruction[12],out=AMout);
    
    And(a=Cinstruction,b=instruction[4],out=loadD);  // if (Cinstruction and instruction[4]) then loadD
    DRegister(in=ALUout,load=loadD,out=Dout);
    
    ALU(x=Dout,y=AMout,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],
        f=instruction[7],no=instruction[6],out=ALUout,zr=ZRout,ng=NGout);
        
    Or16(a=false,b=ALUout,out=outM);                 // ALUout to outM
    Or16(a=false,b=Aout,out[0..14]=addressM);        // Aout to addressM 
    And(a=Cinstruction,b=instruction[3],out=writeM); // if(Cinstruction and instruction[3]) then writeM
    
    And(a=NGout,b=instruction[2],out=jlt);
    And(a=ZRout,b=instruction[1],out=jeq);
    
    Or(a=ZRout,b=NGout,out=zeroOrneg);
    Not(in=zeroOrneg,out=positive);
    
    And(a=positive,b=instruction[0],out=jgt);
    
    Or(a=jlt,b=jeq,out=jle);
    Or(a=jle,b=jgt,out=jmpToA);  // meets a jump condition then jump
    
    And(a=Cinstruction,b=jmpToA,out=loadPC);  // only jump if condtions are met and is Cinstruction
    Not(in=loadPC,out=incPC);                 // do not jump and increment at the same time
    PC(in=Aout,inc=incPC,load=loadPC,reset=reset,out[0..14]=pc);
}
